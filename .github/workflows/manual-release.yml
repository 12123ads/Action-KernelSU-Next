name: Build and Release OnePlus Kernels with KernelSU Next & SUSFS

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      make_release:
        description: 'Do you want to create a release?'
        required: true
        type: boolean
        default: true

jobs:
  build-kernels:
    strategy:
      matrix:
        device: [10T, 11, 12, 12r, Ace2, Ace2Pro, Ace3Pro, Ace3V, Ace5, PadPro, AcePro]
    uses: ./.github/workflows/Build-ksunext-${{ matrix.device }}-SUSFS.yml
    secrets: inherit

  trigger-release:
    runs-on: ubuntu-latest
    needs: build-kernels
    if: ${{ inputs.make_release }}
    env:
      REPO_OWNER: TheWildJames
      REPO_NAME: OnePlus_KernelSU_SUSFS
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_NAME: "*TEST BUILD* OnePlus Kernels With KernelSU Next & SUSFS v1.5.5-CI *TEST BUILD*"
      RELEASE_NOTES: |
        This release contains KernelSU Next and SUSFS v1.5.5-CI
        
        Features:
        [+] KernelSU-Next
        [+] SUSFS CI
        [+] VFS HOOK
        [+] Magic Mount Support

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate and Create New Tag
        run: |
            LATEST_TAG=$(gh api repos/$REPO_OWNER/$REPO_NAME/tags --jq '.[0].name' || echo "")
            if [[ -z "$LATEST_TAG" ]]; then
              LATEST_TAG="v1.5.5-r0"
            fi
            
            NEW_TAG=$(echo "$LATEST_TAG" | awk -F'-r' '{suffix=$2+1; printf "%s-r%d", $1, suffix}')
            echo "NEW_TAG=${NEW_TAG}" >> $GITHUB_ENV
            
            git tag $NEW_TAG
            git push origin $NEW_TAG
            
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: kernel-artifacts
          path: ./downloaded-artifacts

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.NEW_TAG }}
          prerelease: true
          release_name: ${{ env.RELEASE_NAME }}
          body: ${{ env.RELEASE_NOTES }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets Dynamically
        run: |
          for file in $(find ./downloaded-artifacts -type f); do
              echo "Uploading $file..."
              gh release upload ${{ env.NEW_TAG }} "$file"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_TAG: ${{ env.NEW_TAG }}

      - name: Display Files Uploaded
        run: |
          echo "GitHub release created with the following files:"
          find ./downloaded-artifacts -type f -exec ls -lh {} +